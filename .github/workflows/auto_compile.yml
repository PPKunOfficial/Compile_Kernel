name: "Compile Android Kernel"

on:
  workflow_dispatch:
    inputs:
      KERNEL_URL:
        description: 'KERNEL_URL'
        required: true
        default: 'https://github.com/PPKunOfficial/android_kernel_xiaomi_sdm845.git'
      KERNEL_DIR:
        description: 'KERNEL_DIR'
        required: true
        default: 'android_kernel_xiaomi_sdm845'
      FRESH_CACHE:
        description: 'FRESH_CACHE'
        required: true
        default: '0'
      CLONE_ARG:
        description: 'CLONE_ARGUMENT'
        required: false
        default: '-b lineage-18.1'
      ARCHOSUB:
        description: 'ARCH/SUBARCH'
        required: true
        default: 'arm64'
      TOOLCHAIN_DIR:
        description: 'TOOLCHAIN_DIR'
        required: true
        default: 'linux-x86/clang-r445002'
      USEDEFCONFIG:
        description: 'USEDEFCONFIG'
        required: true
        default: 'dipper_defconfig'
      COMPILE_SET:
        description: 'COMPILE_SET'
        required: false
        default: ''

jobs:
  ready_compile_env:
    name: Compile kernel
    runs-on: ubuntu-latest
    steps:
    - name: cacheClang
      id: cacheClang
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}
        key: ${{ runner.os }}-${{ github.event.inputs.TOOLCHAIN_DIR }}
    - name: cacheKernel
      id: cacheKernel
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/${{ github.event.inputs.KERNEL_DIR }}
        key: ${{ runner.os }}-${{ github.event.inputs.KERNEL_DIR }}-${{ github.event.inputs.FRESH_CACHE }}

    - name: Ready Compile
      run: |
        sudo apt update -y
        sudo apt install -y git wget unzip p7zip-full git

    - name: Clone Clang
      if: steps.cacheClang.outputs.cache-hit != 'true'
      run: |
        git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1
        chmod -R 777 ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}

    - name: Clone Kernel Code
      if: steps.cacheKernel.outputs.cache-hit != 'true'
      run: |
        git clone ${{ github.event.inputs.KERNEL_URL }} ${{ github.event.inputs.CLONE_ARG }}

    - name: Compile Kernel
      run: |
        cd ${{ github.workspace }}/${{ github.event.inputs.KERNEL_DIR }}
        git pull 
        export ARCH=${{ github.event.inputs.ARCHOSUB }}
        export AR=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-ar
        export NM=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-nm
        export OBJCOPY=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objcopy
        export OBJDUMP=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objdump
        export STRIP=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-strip
        export SUBARCH=${{ github.event.inputs.ARCHOSUB }}
        export CC=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/clang
        export CROSS_COMPILE=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/arm-linux-gnueabi-
        export PATH="${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin:$PATH"

        make O=out ${{ github.event.inputs.USEDEFCONFIG }}
        
        make -j$(nproc --all) O=out \
        AR=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-ar \
        NM=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-nm \
        OBJCOPY=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objcopy \
        OBJDUMP=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objdump \
        STRIP=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-strip \
        ARCH=${{ github.event.inputs.ARCHOSUB }} \
        SUBARCH=${{ github.event.inputs.ARCHOSUB }} \
        CC=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/clang \
        CROSS_COMPILE=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/arm-linux-gnueabi- \
        ${{ github.event.inputs.COMPILE_SET }}
    
    - name: Upload to Cloud
      run: |
        sudo apt install curl
        curl -sL https://git.io/file-transfer | sh 
       
        ./transfer arp ${{ github.workspace }}/${{ github.event.inputs.KERNEL_DIR }}/out/arch/arm64/boot/Image.gz-dtb --silent
